{"title":"熟悉zino框架","uid":"40e410b5347e58401e54ab5e8d97a4e6","slug":"zino-start","date":"2024-09-03T14:00:00.000Z","updated":"2025-01-21T08:29:38.191Z","comments":true,"path":"api/articles/zino-start.json","keywords":null,"cover":"/img/zino-start.jpg","content":"<h2 id=\"intro\"><a href=\"#intro\" class=\"headerlink\" title=\"intro\"></a>intro</h2><p>这次准备基于zino官方的<code>example/actix-app</code>来进行学习，进行代码阅读并参照zino开发文档进行学习记录。</p>\n<h2 id=\"从example开始熟悉zino框架\"><a href=\"#从example开始熟悉zino框架\" class=\"headerlink\" title=\"从example开始熟悉zino框架\"></a>从example开始熟悉zino框架</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">开发环境：</span><br><span class=\"line\">windows11</span><br><span class=\"line\">rustup 1.27.1</span><br><span class=\"line\">rustc 1.84.0</span><br><span class=\"line\">postrageSQL</span><br><span class=\"line\">更多配置参照cargo.toml</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过actix-app-了解zino框架\"><a href=\"#通过actix-app-了解zino框架\" class=\"headerlink\" title=\"通过actix-app 了解zino框架\"></a>通过actix-app 了解zino框架</h3><ul>\n<li><p><strong>文件目录格式参照：<a href=\"https://zino.cc/guide/structure.html\">目录结构 - Zino开发框架中文教程</a></strong></p>\n</li>\n<li><p>使用类似于<a href=\"https://www.eggjs.org/zh-CN/basics/structure\">Egg.js</a>的应用目录约定规范</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zino-app</span><br><span class=\"line\">├─ Cargo.toml</span><br><span class=\"line\">├─ config</span><br><span class=\"line\">│  ├─ config.dev.toml</span><br><span class=\"line\">│  ├─ config.prod.toml</span><br><span class=\"line\">│  ├─ locale</span><br><span class=\"line\">│  │  ├─ en-US.ftl</span><br><span class=\"line\">│  │  └─ zh-CN.ftl</span><br><span class=\"line\">│  ├─ opa</span><br><span class=\"line\">│  │  └─ user.opa</span><br><span class=\"line\">│  └─ openapi</span><br><span class=\"line\">│     ├─ OPENAPI.toml</span><br><span class=\"line\">│     ├─ auth.toml</span><br><span class=\"line\">│     └─ user.toml</span><br><span class=\"line\">├─ local</span><br><span class=\"line\">│  ├─ data</span><br><span class=\"line\">│  │  └─ mock</span><br><span class=\"line\">│  │     ├─ logs.ndjson</span><br><span class=\"line\">│  │     └─ users.csv</span><br><span class=\"line\">│  └─ docs</span><br><span class=\"line\">│     └─ rapidoc.html</span><br><span class=\"line\">├─ logs</span><br><span class=\"line\">├─ public</span><br><span class=\"line\">│  ├─ 404.html</span><br><span class=\"line\">│  ├─ data</span><br><span class=\"line\">│  │  └─ logs.ndjson</span><br><span class=\"line\">│  └─ index.html</span><br><span class=\"line\">├─ src</span><br><span class=\"line\">│  ├─ controller</span><br><span class=\"line\">│  │  ├─ mod.rs</span><br><span class=\"line\">│  │  ├─ stats.rs</span><br><span class=\"line\">│  │  ├─ task.rs</span><br><span class=\"line\">│  │  └─ user.rs</span><br><span class=\"line\">│  ├─ extension</span><br><span class=\"line\">│  │  ├─ casbin.rs</span><br><span class=\"line\">│  │  ├─ header.rs</span><br><span class=\"line\">│  │  └─ mod.rs</span><br><span class=\"line\">│  ├─ logic</span><br><span class=\"line\">│  │  ├─ mod.rs</span><br><span class=\"line\">│  │  ├─ task.rs</span><br><span class=\"line\">│  │  └─ user.rs</span><br><span class=\"line\">│  ├─ main.rs</span><br><span class=\"line\">│  ├─ middleware</span><br><span class=\"line\">│  │  ├─ access.rs</span><br><span class=\"line\">│  │  └─ mod.rs</span><br><span class=\"line\">│  ├─ router</span><br><span class=\"line\">│  │  └─ mod.rs</span><br><span class=\"line\">│  ├─ schedule</span><br><span class=\"line\">│  │  ├─ job.rs</span><br><span class=\"line\">│  │  └─ mod.rs</span><br><span class=\"line\">│  └─ service</span><br><span class=\"line\">│     ├─ mod.rs</span><br><span class=\"line\">│     ├─ task.rs</span><br><span class=\"line\">│     └─ user.rs</span><br><span class=\"line\">└─ templates</span><br><span class=\"line\">   ├─ layout.html</span><br><span class=\"line\">   └─ output.html</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Cargo.toml</code>为应用的Cargo配置文件。</li>\n<li><code>config/config.&#123;env&#125;.toml</code>用于编写不同运行环境的配置文件。</li>\n<li><code>config/locale/&#123;lang-id&#125;.ftl</code>于编写i18n多语言文件，目前仅支持<a href=\"https://projectfluent.org/\"><code>Fluent</code></a>规范。</li>\n<li><code>config/opa/&#123;policy&#125;.rego</code>用于编写OpenPolicyAgent策略。</li>\n<li><code>config/openapi/&#123;tag&#125;.toml</code>用于编写OpenAPI规范文档。</li>\n<li><code>local/</code>为本地静态资源目录，<code>data/</code>为本地数据目录，<code>docs/</code>为文档目录。</li>\n<li><code>logs/</code>用于日志文件输出。</li>\n<li><code>public/</code>为通过网络访问的静态资源目录，<code>index.html</code>为默认首页文件，<code>404.html</code>为404文件，<code>data/</code>为共享的数据目录。</li>\n<li><code>src/controller/</code>用于编写控制器。</li>\n<li><code>src/extension/</code>用于编写辅助函数。</li>\n<li><code>src/logic/</code>用于编写业务逻辑。</li>\n<li><code>src/main.rs</code>用于启动应用以及自定义初始化。</li>\n<li><code>src/middleware/</code>用于编写中间件。</li>\n<li><code>src/router/</code>用于配置URL路由规则。</li>\n<li><code>src/schedule/</code>用于编写定时任务。</li>\n<li><code>src/service/</code>用于编写业务接口服务，供<code>controller</code>调用。</li>\n<li><code>templates/</code>用于编写HTML模板文件，目前支持<a href=\"https://docs.rs/tera\"><code>Tera</code></a>和<a href=\"https://docs.rs/minijinja\"><code>MiniJinja</code></a>模板。</li>\n</ul>\n<hr>\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><p>首先是config下配置的config.{env}.toml文件</p>\n<p>zino框架提供了可供修改的config配置文件来方便设定相关服务信息从而规避需要直接对代码进行修改后重新编译的开销。</p>\n<ol>\n<li><code>name</code>,<code>version</code>配置应用名称和版本号</li>\n<li><code>main</code>服务，<code>debug</code>以及备用<code>standby</code>服务均可以单独指定<em>host</em>以及<em>port</em>，支持使用tag标识</li>\n<li>数据库相关配置为<code>[database]</code> <code>[[postgres]]</code> <code>[[sqlite]]</code>。可以将postgres替换为需求的数据库，具体数据库支持请参照zino的相关文档。</li>\n<li>其他重要配置，包括日志追踪、指标监控<code>prometheus</code>、<code>jwt</code>认证、api文档配置等参考实际文件。</li>\n</ol>\n<p>示例：</p>\n<figure class=\"highlight toml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[database]</span></span><br><span class=\"line\"><span class=\"attr\">namespace</span> = <span class=\"string\">&quot;dc&quot;</span></span><br><span class=\"line\"><span class=\"attr\">max-rows</span> = <span class=\"number\">10000</span>    <span class=\"comment\"># 最大行数限制</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># PostgreSQL 配置</span></span><br><span class=\"line\"><span class=\"section\">[[postgres]]</span></span><br><span class=\"line\"><span class=\"attr\">host</span> = <span class=\"string\">&quot;127.0.0.1&quot;</span></span><br><span class=\"line\"><span class=\"attr\">port</span> = <span class=\"number\">5432</span></span><br><span class=\"line\"><span class=\"attr\">database</span> = <span class=\"string\">&quot;data_cube&quot;</span></span><br><span class=\"line\"><span class=\"attr\">username</span> = <span class=\"string\">&quot;postgres&quot;</span></span><br><span class=\"line\"><span class=\"attr\">password</span> = <span class=\"string\">&quot;...&quot;</span>    <span class=\"comment\"># 数据库密码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># SQLite 配置</span></span><br><span class=\"line\"><span class=\"section\">[[sqlite]]</span></span><br><span class=\"line\"><span class=\"attr\">database</span> = <span class=\"string\">&quot;local/data/main.db&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"日志文件\"><a href=\"#日志文件\" class=\"headerlink\" title=\"日志文件\"></a>日志文件</h3><p>默认情况下，日志文件log将在logs文件夹下进行保存，命名方式为<code>&#123;name&#125;.&#123;env&#125;.&#123;time&#125;.log</code></p>\n<h3 id=\"public\"><a href=\"#public\" class=\"headerlink\" title=\"public\"></a>public</h3><p>zino推荐将前端静态资源放置在public里面，在项目迁移时，所有前端资源都将被防止在public中进行组织。您可以在<code>src/router</code>中进行路由配置</p>\n<hr>\n<h3 id=\"src\"><a href=\"#src\" class=\"headerlink\" title=\"src\"></a>src</h3><p>参考前文提供的文件目录架构，来熟悉以下zino框架下的后端代码组织。本次学习参照的是<code>example/actix-app</code>作为标准代码。下面基于一般性的基础需求进行学习。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>src/controller/</code>用于编写控制器。<br><code>src/extension/</code>用于编写辅助函数。<br><code>src/logic/</code>用于编写业务逻辑。<br><code>src/main.rs</code>用于启动应用以及自定义初始化。<br><code>src/middleware/</code>用于编写中间件。<br><code>src/router/</code>用于配置URL路由规则。<br><code>src/schedule/</code>用于编写定时任务。<br><code>src/service/</code>用于编写业务接口服务，供<code>controller</code>调用。</p></blockquote>\n<h4 id=\"domain-extension-logic-service\"><a href=\"#domain-extension-logic-service\" class=\"headerlink\" title=\"domain extension logic service\"></a><code>domain</code> <code>extension</code> <code>logic</code> <code>service</code></h4><p>在本项目中，由于只实现一些十分简单的功能，所以并没有相关这部分的代码可供参考，在此留空，待笔者学成归来。理解上，<code>service</code>大概类似于<code>controller</code>中的部分功能拆分，优化代码构筑和代码可读性。</p>\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">WARNING</p>\n<p></p>\n</div>\n<h4 id=\"router\"><a href=\"#router\" class=\"headerlink\" title=\"router\"></a>router</h4><p><code>router</code>下只使用了一个mod文件来存放整个项目的路由信息。</p>\n<p><strong>使用RESTfulAPI的风格设计</strong></p>\n<p>zino框架下的路由实现你可以根据使用的框架自行调整，下面是aticx的实现方式，你使用axum的构建形式，通过形如下述进行实现也是可以的。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">routes</span>() <span class=\"punctuation\">-&gt;</span> <span class=\"type\">Vec</span>&lt;Router&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">routes</span> = <span class=\"type\">Vec</span>::<span class=\"title function_ invoke__\">new</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Auth controller.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">router</span> = Router::<span class=\"title function_ invoke__\">new</span>().<span class=\"title function_ invoke__\">route</span>(<span class=\"string\">&quot;/auth/login&quot;</span>, <span class=\"title function_ invoke__\">post</span>(auth::login)).<span class=\"title function_ invoke__\">merge</span>(</span><br><span class=\"line\">        Router::<span class=\"title function_ invoke__\">new</span>()</span><br><span class=\"line\">            .<span class=\"title function_ invoke__\">route</span>(<span class=\"string\">&quot;/auth/refresh&quot;</span>, <span class=\"title function_ invoke__\">get</span>(auth::refresh))</span><br><span class=\"line\">            .<span class=\"title function_ invoke__\">route</span>(<span class=\"string\">&quot;/auth/logout&quot;</span>, <span class=\"title function_ invoke__\">post</span>(auth::logout))</span><br><span class=\"line\">            .<span class=\"title function_ invoke__\">layer</span>(<span class=\"title function_ invoke__\">from_fn</span>(middleware::init_user_session)),</span><br><span class=\"line\">    );</span><br><span class=\"line\">    routes.<span class=\"title function_ invoke__\">push</span>(router);</span><br><span class=\"line\">    </span><br><span class=\"line\">    ...</span><br><span class=\"line\">    </span><br><span class=\"line\">    routes</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于zino兼容了主流rust的头部框架，你可以在代码开头看到<code>use actix_web::web::&#123;&#125;;</code></p>\n<ul>\n<li><p>使用<code>routes()</code>和<code>debug_routes()</code>整合整个路由配置拆分为主要路由和调试路由。主要功能就是把我们准备的各种不同功能的路由分组打包成vec。</p>\n<ul>\n<li>代码中使用了形如<code>auth_router as RouterConfigure</code>的语句，参照<code>RouterConfigure</code>源码<code>pub type RouterConfigure = fn(cfg: &amp;mut actix_web::web::ServiceConfig);</code></li>\n<li>可知<code>RouterConfigure</code>是类型别名，定义了一个函数类型。<ul>\n<li>接收一个可变引用<code>&amp;mut actix_web::web::ServiceConfig</code></li>\n<li>返回空</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>具体路由方面，路由使用<code>.wrap(middleware::WserSessionInitializer),</code>为需要会话验证的部分指定使用会话中间件进行会话验证</p>\n</li>\n<li><div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F78C6C\">fn</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">auth_router</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">cfg</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&amp;</span><span style=\"color: #C792EA\">mut</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">ServiceConfig</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">    // 不需要会话验证的路由</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    cfg</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">route</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">/auth/login</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">post</span><span style=\"color: #89DDFF\">().</span><span style=\"color: #82AAFF\">to</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">auth</span><span style=\"color: #89DDFF\">::</span><span style=\"color: #BABED8\">login</span><span style=\"color: #89DDFF\">));</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">    // 需要会话验证的路由组</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    cfg</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">service</span><span style=\"color: #89DDFF\">(</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">scope</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">/auth</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">route</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">/refresh</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">get</span><span style=\"color: #89DDFF\">().</span><span style=\"color: #82AAFF\">to</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">auth</span><span style=\"color: #89DDFF\">::</span><span style=\"color: #BABED8\">refresh</span><span style=\"color: #89DDFF\">))</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">route</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">/logout</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">post</span><span style=\"color: #89DDFF\">().</span><span style=\"color: #82AAFF\">to</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">auth</span><span style=\"color: #89DDFF\">::</span><span style=\"color: #BABED8\">logout</span><span style=\"color: #89DDFF\">))</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">wrap</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">middleware</span><span style=\"color: #89DDFF\">::</span><span style=\"color: #FFCB6B\">UserSessionInitializer</span><span style=\"color: #89DDFF\">),</span><span style=\"color: #676E95; font-style: italic\">  // 添加会话中间件</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&lt;!--</span><span style=\"color: #BABED8\">code￼</span><span style=\"color: #F78C6C\">4</span><span style=\"color: #89DDFF\">--&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\"> 区分controller方法和model方法</span></span></code></pre></div></li>\n<li><p>在mod中，我们可以看到分别调用了<code>User</code>和<code>user</code>，里面涉及到使用了zino框架提供的default方法和自己实现的方法，等看到controller的代码之后再进行解决</p>\n</li>\n</ul>\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">WARNING</p>\n<p></p>\n</div>\n<h4 id=\"middleware\"><a href=\"#middleware\" class=\"headerlink\" title=\"middleware\"></a>middleware</h4><p>middleware中主要定义了一个用于处理Jwt验证的会话中间件</p>\n<h5 id=\"UserSessionInitializer\"><a href=\"#UserSessionInitializer\" class=\"headerlink\" title=\"UserSessionInitializer\"></a>UserSessionInitializer</h5><p>中间件初始化器，实现了Transform Trait，</p>\n<ul>\n<li><p>在Transform trait中，type的部分定义的是transform的关联类型</p>\n</li>\n<li><p><code>new_transform</code>方法接收一个实现了<code>S</code>要求trait和self，返回前面定义的<code>Future</code>关联类型</p>\n<ul>\n<li><code>S</code> 其实就是服务类型的泛型,标识实际请求的服务</li>\n<li><code>B</code>是响应体的类型，通常是字节流或者其他内容</li>\n<li><code>ServiceRequest</code>是请求类型，他会传递给这个中间件</li>\n<li><code>S: Service&lt;ServiceRequest, Response = ServiceResponse&lt;B&gt;, Error = Error&gt;</code>: 这部分约束指定了服务 <code>S</code> 必须是一个能够接受 <code>ServiceRequest</code> 请求并返回 <code>ServiceResponse&lt;B&gt;</code> 响应的服务，而且必须能够处理 <code>Error</code> 错误</li>\n<li><code>S::Future: &#39;static</code>: 这表示 <code>S</code> 服务的 <code>Future</code> 返回类型必须是 <code>&#39;static</code>，即不会包含生命周期依赖于局部变量的引用</li>\n</ul>\n</li>\n<li><p><code>type Transform = UserSessionMiddleware&lt;S&gt;;</code><br>这是中间件最终产生的类型。在这个实现中，<code>Transform</code> 类型是 <code>UserSessionMiddleware&lt;S&gt;</code>，这意味着该中间件会返回一个 <code>UserSessionMiddleware</code> 类型的对象，它本质上包裹了原始的服务 <code>S</code></p>\n</li>\n<li><p><code>new_transform</code>用于实际转换服务，并返回一个新的中间件实例</p>\n<ul>\n<li>通过<code>UserSessionMiddleware</code>打包<code>service</code>服务并作为<code>ready</code>类型的<code>Future</code>返回。<code>Future</code>包含<code>Ok(UserSessionMiddleware)</code>作为结果</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"UserSessionMiddleware\"><a href=\"#UserSessionMiddleware\" class=\"headerlink\" title=\"UserSessionMiddleware\"></a>UserSessionMiddleware</h5><p>用于处理请求，解析JWT，并设置用户会话。</p>\n<ul>\n<li><code>type Future =   Pin&lt;box&lt;dyn Future&lt;Output = Result&lt;Self::Response, Self::Error&gt;&gt;&gt;&gt;;</code><ul>\n<li>这是<code>call</code>方法的返回类型，代表中间件的异步执行结果。</li>\n<li><code>Pine&lt;Box&lt;dyn Future&lt;...&gt;&gt;&gt;</code>用来包裹<code>Future</code>来满足异步操作和动态分配的需求。</li>\n<li><code>forward_ready!(service);</code><br>这是 Actix Web 中间件的宏，用于将服务 <code>service</code> 的 <code>ready</code> 状态转发。它确保在中间件中，<code>ready</code> 状态的判断和转发正确，允许中间件将控制权传递给下游服务</li>\n</ul>\n</li>\n<li><code>let mut req: Extractor&lt;HttpRequest&gt; =  Request::from(req);</code><br>将Actix-web的<code>ServiceRequest</code>转换为<code>zino::Request</code>,用于后续调用zino中的相关方法</li>\n<li><code>req.parse_jwt_claims(JwtClaims::shared_key())</code>解析Jwt，获取共享密钥，解析并提取声明<ul>\n<li>解析成功并返回Jwt声明，可以转换为<code>UserSession</code>（有效的用户会话），将会话数据存入请求</li>\n<li>解析失败 || 会话转换失败，返回拒绝响应</li>\n</ul>\n</li>\n<li>解析成果并完成会话创建之后，将会把req重新还原回到<code>ServiceRequest</code>从而能够按照Actix-web的要求继续传递给下游服务<br>{总结，关于在Zino中如何处理request，是兼容actix-web的，在具体的响应处理中，使用zino中已经预先准备好的标准化方法，也就是源代码中的<code>let mut req = Request::from(req);</code>和<code>let req = ServiceRequest::from(req);</code>通过转换req的类型来接入zino的标准化处理，然后还原到actix-web的标准类型中来保持兼容请求传递}</li>\n<li><code>Box::pin(async move &#123; let res = fut.await?; Ok(res) &#125;)</code><br>通过 <code>Box::pin</code> 将 <code>fut.await</code> 包装成一个固定的异步任务。在这里，等待实际服务的响应并返回。如果服务响应成功，则返回结果；否则，返回错误</li>\n</ul>\n<h4 id=\"model\"><a href=\"#model\" class=\"headerlink\" title=\"model\"></a>model</h4><p>对于model部分，是项目实现的核心。这里将会参照zino crate的文档进行详细阅读。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> serde::&#123;Deserialize, Serialize&#125;; <span class=\"comment\">// 序列化 反序列化</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> zino::prelude::*; <span class=\"comment\">// zino打包的预导入模块，里面包含了zino的主要常用模块</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> zino_derive::&#123;DecodeRow, Model, ModelAccessor, ModelHooks, Schema&#125;;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"zino-prelude\"><a href=\"#zino-prelude\" class=\"headerlink\" title=\"zino::prelude\"></a>zino::prelude</h6><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">use</span> zino_core::&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 应用相关</span></span><br><span class=\"line\">    application::&#123;Application, Plugin&#125;,</span><br><span class=\"line\">    state::State,</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 错误处理</span></span><br><span class=\"line\">    error::Error,</span><br><span class=\"line\">    bail, warn,</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 时间日期</span></span><br><span class=\"line\">    datetime::&#123;Date, DateTime, Time&#125;,</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// JSON扩展</span></span><br><span class=\"line\">    extension::&#123;JsonObjectExt, JsonValueExt, TomlTableExt&#125;,</span><br><span class=\"line\">    json,</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 模型相关</span></span><br><span class=\"line\">    model::&#123;Model, ModelHooks, Mutation, Query, QueryContext&#125;,</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 任务调度</span></span><br><span class=\"line\">    schedule::&#123;</span><br><span class=\"line\">        AsyncCronJob, AsyncJob, AsyncJobScheduler,</span><br><span class=\"line\">        CronJob, Job, JobContext, JobScheduler</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 基础类型</span></span><br><span class=\"line\">    BoxFuture, Decimal, LazyLock, Map, Record, Uuid,</span><br><span class=\"line\">    validation::Validation,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>以及一些feature的可选项，按需取用。</p>\n<h6 id=\"zino-derive\"><a href=\"#zino-derive\" class=\"headerlink\" title=\"zino_derive\"></a>zino_derive</h6><p>导入过程宏，避免手动实现，zino中的大部分功能都能通过derive过程宏进行实现，详细参照crate的代码。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#![doc = include_str!(<span class=\"string\">&quot;../README.md&quot;</span>)]</span></span><br><span class=\"line\"><span class=\"meta\">#![doc(html_favicon_url = <span class=\"string\">&quot;https://zino.cc/assets/zino-logo.png&quot;</span>)]</span></span><br><span class=\"line\"><span class=\"meta\">#![doc(html_logo_url = <span class=\"string\">&quot;https://zino.cc/assets/zino-logo.svg&quot;</span>)]</span></span><br><span class=\"line\"><span class=\"meta\">#![forbid(unsafe_code)]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> proc_macro::TokenStream;</span><br><span class=\"line\"><span class=\"keyword\">use</span> syn::&#123;parse_macro_input, DeriveInput&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">mod</span> decode_row;</span><br><span class=\"line\"><span class=\"keyword\">mod</span> entity;</span><br><span class=\"line\"><span class=\"keyword\">mod</span> model;</span><br><span class=\"line\"><span class=\"keyword\">mod</span> model_accessor;</span><br><span class=\"line\"><span class=\"keyword\">mod</span> model_hooks;</span><br><span class=\"line\"><span class=\"keyword\">mod</span> parser;</span><br><span class=\"line\"><span class=\"keyword\">mod</span> schema;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[doc = include_str!(<span class=\"string\">&quot;../docs/entity.md&quot;</span>)]</span></span><br><span class=\"line\"><span class=\"meta\">#[proc_macro_derive(Entity, attributes(schema))]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">derive_entity</span>(item: TokenStream) <span class=\"punctuation\">-&gt;</span> TokenStream &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">input</span> = parse_macro_input!(item <span class=\"keyword\">as</span> DeriveInput);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">output</span> = entity::<span class=\"title function_ invoke__\">parse_token_stream</span>(input);</span><br><span class=\"line\">    TokenStream::<span class=\"title function_ invoke__\">from</span>(output)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[doc = include_str!(<span class=\"string\">&quot;../docs/schema.md&quot;</span>)]</span></span><br><span class=\"line\"><span class=\"meta\">#[proc_macro_derive(Schema, attributes(schema))]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">derive_schema</span>(item: TokenStream) <span class=\"punctuation\">-&gt;</span> TokenStream &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">input</span> = parse_macro_input!(item <span class=\"keyword\">as</span> DeriveInput);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">output</span> = schema::<span class=\"title function_ invoke__\">parse_token_stream</span>(input);</span><br><span class=\"line\">    TokenStream::<span class=\"title function_ invoke__\">from</span>(output)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[doc = include_str!(<span class=\"string\">&quot;../docs/model_accessor.md&quot;</span>)]</span></span><br><span class=\"line\"><span class=\"meta\">#[proc_macro_derive(ModelAccessor, attributes(schema))]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">derive_model_accessor</span>(item: TokenStream) <span class=\"punctuation\">-&gt;</span> TokenStream &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">input</span> = parse_macro_input!(item <span class=\"keyword\">as</span> DeriveInput);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">output</span> = model_accessor::<span class=\"title function_ invoke__\">parse_token_stream</span>(input);</span><br><span class=\"line\">    TokenStream::<span class=\"title function_ invoke__\">from</span>(output)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[doc = include_str!(<span class=\"string\">&quot;../docs/decode_row.md&quot;</span>)]</span></span><br><span class=\"line\"><span class=\"meta\">#[proc_macro_derive(DecodeRow, attributes(schema))]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">derive_decode_row</span>(item: TokenStream) <span class=\"punctuation\">-&gt;</span> TokenStream &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">input</span> = parse_macro_input!(item <span class=\"keyword\">as</span> DeriveInput);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">output</span> = decode_row::<span class=\"title function_ invoke__\">parse_token_stream</span>(input);</span><br><span class=\"line\">    TokenStream::<span class=\"title function_ invoke__\">from</span>(output)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[doc = include_str!(<span class=\"string\">&quot;../docs/model_hooks.md&quot;</span>)]</span></span><br><span class=\"line\"><span class=\"meta\">#[proc_macro_derive(ModelHooks, attributes(schema))]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">derive_model_hooks</span>(item: TokenStream) <span class=\"punctuation\">-&gt;</span> TokenStream &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">input</span> = parse_macro_input!(item <span class=\"keyword\">as</span> DeriveInput);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">output</span> = model_hooks::<span class=\"title function_ invoke__\">parse_token_stream</span>(input);</span><br><span class=\"line\">    TokenStream::<span class=\"title function_ invoke__\">from</span>(output)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[doc = include_str!(<span class=\"string\">&quot;../docs/model.md&quot;</span>)]</span></span><br><span class=\"line\"><span class=\"meta\">#[proc_macro_derive(Model, attributes(schema))]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">derive_model</span>(item: TokenStream) <span class=\"punctuation\">-&gt;</span> TokenStream &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">input</span> = parse_macro_input!(item <span class=\"keyword\">as</span> DeriveInput);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">output</span> = model::<span class=\"title function_ invoke__\">parse_token_stream</span>(input);</span><br><span class=\"line\">    TokenStream::<span class=\"title function_ invoke__\">from</span>(output)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h6 id=\"pub-struct-Tag\"><a href=\"#pub-struct-Tag\" class=\"headerlink\" title=\"pub struct Tag\"></a>pub struct Tag</h6><p>代码中为<code>Tag</code>实现了<code> Debug,Clone,Default,Serialize,eserialize,DecodeRow,Schema,ModelAccessor,ModelHooks,Model,</code>宏。还有一个需要重点了解的<code>#[schema(auto_rename)]</code></p>\n<ul>\n<li><p>auto_rename:</p>\n<ul>\n<li>命名规范转换：<ul>\n<li>结构体名称 -&gt; 表名（驼峰转蛇形）</li>\n<li>字段名 -&gt; 列名（驼峰转蛇形）</li>\n</ul>\n</li>\n<li>特殊处理：<ul>\n<li>保留字段（如 created_at, updated_at 等）</li>\n<li>主键字段（默认为 id）</li>\n<li>引用字段（如 parent_id）</li>\n<li>生成静态元数据</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>DecodeRow</p>\n<ul>\n<li>将定义的字段转换为数据库的列名</li>\n</ul>\n</li>\n<li><p>ModelHooks</p>\n<ul>\n<li><p>zino预先继承了有关ORM等的操作，相关可以参考源代码。</p>\n</li>\n<li><p>在标准实现中，保留有空接口，这些接口你可以通过手动重写来将逻辑插入到zino提供的标准实现中，从而达到个性化业务逻辑需求。比如：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">x</span>() <span class=\"punctuation\">-&gt;</span> () &#123;</span><br><span class=\"line\">    .....</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">hook1</span>();</span><br><span class=\"line\">    ....</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">hook2</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过重写<code>hook1</code>和<code>hook2</code>，从而将个性化业务逻辑插入到标准操作的指定位置，例如写入数据库前后。</p>\n</li>\n</ul>\n</li>\n<li><p>schema</p>\n<ul>\n<li>数据库映射：<ul>\n<li>定义表结构</li>\n<li>设置字段类型</li>\n<li>创建索引</li>\n<li>建立外键关系</li>\n</ul>\n</li>\n<li>验证规则：<ul>\n<li>非空检查</li>\n<li>默认值处理</li>\n<li>字段访问控制</li>\n</ul>\n</li>\n<li>文档生成：<ul>\n<li>API文档</li>\n<li>数据库文档</li>\n<li>字段说明</li>\n</ul>\n</li>\n<li>代码生成：<ul>\n<li>ORM方法</li>\n<li>CRUD操作</li>\n<li>模型关联</li>\n</ul>\n</li>\n<li>通过标准化语法，来用最少的代码量实现模型定义。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"schedule\"><a href=\"#schedule\" class=\"headerlink\" title=\"schedule\"></a>schedule</h4><p>调度器设计</p>\n<h5 id=\"job-rs\"><a href=\"#job-rs\" class=\"headerlink\" title=\"job.rs\"></a>job.rs</h5><ul>\n<li>主要定义了具体任务实现，例如定时任务等。</li>\n<li>在任务中可以设计异步任务。</li>\n<li>实现同步任务的异步任务的设计</li>\n</ul>\n<h5 id=\"mod-rs\"><a href=\"#mod-rs\" class=\"headerlink\" title=\"mod.rs\"></a>mod.rs</h5><p>配置调度器</p>\n<p>分为同步和异步。简单代码，组织方式就是创建在job中定义的任务，添加设置然后添加到<code>scheduler</code>中作为返回值。</p>\n<h4 id=\"controller\"><a href=\"#controller\" class=\"headerlink\" title=\"controller\"></a>controller</h4><h5 id=\"stats\"><a href=\"#stats\" class=\"headerlink\" title=\"stats\"></a>stats</h5><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">async</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">index</span>(req: Request) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">Result</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 创建响应对象，并关联请求上下文</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">res</span> = Response::<span class=\"title function_ invoke__\">default</span>().<span class=\"title function_ invoke__\">context</span>(&amp;req);</span><br><span class=\"line\">    <span class=\"comment\">// 2. 构建统计数据</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">stats</span> = json!(&#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;method&quot;</span>: <span class=\"string\">&quot;GET&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;path&quot;</span>: <span class=\"string\">&quot;/stats&quot;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 获取集群状态数据</span></span><br><span class=\"line\">        <span class=\"string\">&quot;app_state_data&quot;</span>: Cluster::<span class=\"title function_ invoke__\">state_data</span>(),</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 3. 准备模板数据</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">data</span> = json!(&#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;title&quot;</span>: <span class=\"string\">&quot;Stats&quot;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 格式化统计数据</span></span><br><span class=\"line\">        <span class=\"string\">&quot;output&quot;</span>: stats.<span class=\"title function_ invoke__\">to_string_pretty</span>(),</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 4. 渲染模板并返回响应</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Ok</span>(res.<span class=\"title function_ invoke__\">render</span>(<span class=\"string\">&quot;output.html&quot;</span>, data).<span class=\"title function_ invoke__\">into</span>())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>关键点解析：</p>\n<ul>\n<li>请求处理：</li>\n</ul>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">async</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">index</span>(req: Request) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">Result</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>异步处理函数</p>\n<ul>\n<li>接收 Request 类型参数</li>\n<li>返回 Result 类型</li>\n</ul>\n</li>\n<li><p>响应构建：</p>\n</li>\n</ul>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">res</span> = Response::<span class=\"title function_ invoke__\">default</span>().<span class=\"title function_ invoke__\">context</span>(&amp;req);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>创建默认响应</p>\n<ul>\n<li>关联请求上下文</li>\n</ul>\n</li>\n<li><p>状态数据：</p>\n</li>\n</ul>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">stats</span> = json!(&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;method&quot;</span>: <span class=\"string\">&quot;GET&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;path&quot;</span>: <span class=\"string\">&quot;/stats&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;app_state_data&quot;</span>: Cluster::<span class=\"title function_ invoke__\">state_data</span>(),  <span class=\"comment\">// 获取集群状态</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>模板渲染：</li>\n</ul>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_ invoke__\">Ok</span>(res.<span class=\"title function_ invoke__\">render</span>(<span class=\"string\">&quot;output.html&quot;</span>, data).<span class=\"title function_ invoke__\">into</span>())</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>使用 output.html 模板</p>\n<ul>\n<li>传入 JSON 数据</li>\n<li>转换为响应类型</li>\n</ul>\n</li>\n<li><p>这个控制器的主要功能：</p>\n<ul>\n<li>提供应用状态监控</li>\n<li>示集群状态信息</li>\n<li>通过模板渲染数据</li>\n<li>返回 HTML 响应</li>\n</ul>\n</li>\n<li><p>使用场景：</p>\n<ul>\n<li>系统监控</li>\n<li>调试信息查看</li>\n<li>状态数据展示</li>\n<li>集群信息监控</li>\n</ul>\n</li>\n<li><p>这是一个典型的 MVC 架构中的控制器实现，负责：</p>\n<ul>\n<li><p>处理请求</p>\n</li>\n<li><p>获取数据</p>\n</li>\n<li><p>准备视图</p>\n</li>\n<li><p>返回响应</p>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"user-rs\"><a href=\"#user-rs\" class=\"headerlink\" title=\"user.rs\"></a>user.rs</h5><p>包含了创建用户和查看用户两个部分。</p>\n<ul>\n<li>new()部分的标准流程： <ul>\n<li>创建用户并验证</li>\n<li>检查约束条件</li>\n<li>保存用户</li>\n<li>准备响应数据</li>\n<li>设置响应</li>\n</ul>\n</li>\n<li>view():<ul>\n<li>获取用户id</li>\n<li>查询用户</li>\n<li>权限检查</li>\n<li>构建响应</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"file-rs\"><a href=\"#file-rs\" class=\"headerlink\" title=\"file.rs\"></a>file.rs</h5><ul>\n<li><p>upload</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">async</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">upload</span>(<span class=\"keyword\">mut</span> req: Request) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">Result</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 解析表单数据</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> (<span class=\"keyword\">mut</span> body, files) = req.parse_form_data::&lt;Map&gt;().<span class=\"keyword\">await</span>?;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 2. 获取上传目录</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">dir</span> = Cluster::<span class=\"title function_ invoke__\">shared_dir</span>(<span class=\"string\">&quot;uploads&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">expires</span> = DateTime::<span class=\"title function_ invoke__\">now</span>() + Duration::<span class=\"title function_ invoke__\">from_secs</span>(<span class=\"number\">600</span>); <span class=\"comment\">// 10分钟过期</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">encryption_duration</span> = Duration::ZERO;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">uploads</span> = <span class=\"type\">Vec</span>::<span class=\"title function_ invoke__\">new</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 3. 处理每个文件</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"title class_\">mut</span> file <span class=\"keyword\">in</span> files &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 3.1 生成访问凭证</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">query</span> = Map::<span class=\"title function_ invoke__\">new</span>();</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">access_key_id</span> = AccessKeyId::<span class=\"title function_ invoke__\">new</span>();</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">secret_key</span> = SecretAccessKey::<span class=\"title function_ invoke__\">new</span>(&amp;access_key_id);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">security_token</span> = SecurityToken::<span class=\"title function_ invoke__\">try_new</span>(</span><br><span class=\"line\">            access_key_id, </span><br><span class=\"line\">            expires, </span><br><span class=\"line\">            &amp;secret_key</span><br><span class=\"line\">        ).<span class=\"title function_ invoke__\">extract</span>(&amp;req)?;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 3.2 加密文件</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">encryption_start_time</span> = Instant::<span class=\"title function_ invoke__\">now</span>();</span><br><span class=\"line\">        file.<span class=\"title function_ invoke__\">encrypt_with</span>(secret_key.<span class=\"title function_ invoke__\">as_ref</span>()).<span class=\"title function_ invoke__\">extract</span>(&amp;req)?;</span><br><span class=\"line\">        encryption_duration += encryption_start_time.<span class=\"title function_ invoke__\">elapsed</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 3.3 保存文件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> <span class=\"variable\">Some</span>(file_name) = file.<span class=\"title function_ invoke__\">file_name</span>() &#123;</span><br><span class=\"line\">            file.<span class=\"title function_ invoke__\">write</span>(dir.<span class=\"title function_ invoke__\">join</span>(file_name)).<span class=\"title function_ invoke__\">extract</span>(&amp;req)?;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 3.4 准备文件信息</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">map</span> = Map::<span class=\"title function_ invoke__\">new</span>();</span><br><span class=\"line\">            map.<span class=\"title function_ invoke__\">upsert</span>(<span class=\"string\">&quot;field_name&quot;</span>, file.<span class=\"title function_ invoke__\">field_name</span>());</span><br><span class=\"line\">            map.<span class=\"title function_ invoke__\">upsert</span>(<span class=\"string\">&quot;file_name&quot;</span>, file_name);</span><br><span class=\"line\">            map.<span class=\"title function_ invoke__\">upsert</span>(<span class=\"string\">&quot;content_type&quot;</span>, file.<span class=\"title function_ invoke__\">content_type</span>().<span class=\"title function_ invoke__\">map</span>(|m| m.<span class=\"title function_ invoke__\">as_ref</span>()));</span><br><span class=\"line\">            map.<span class=\"title function_ invoke__\">upsert</span>(<span class=\"string\">&quot;url&quot;</span>, <span class=\"built_in\">format!</span>(<span class=\"string\">&quot;/file/decrypt?&#123;&#125;&quot;</span>, query.<span class=\"title function_ invoke__\">to_query_string</span>()));</span><br><span class=\"line\">            uploads.<span class=\"title function_ invoke__\">push</span>(map);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>decrypt</p>\n<ul>\n<li><div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F78C6C\">pub</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">async</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">fn</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">decrypt</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">req</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Request</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">-&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Result</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">    // 1. 验证访问凭证</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">let</span><span style=\"color: #BABED8\"> query </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> req</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">parse_query</span><span style=\"color: #89DDFF\">::&lt;</span><span style=\"color: #FFCB6B\">Map</span><span style=\"color: #89DDFF\">&gt;()?;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">let</span><span style=\"color: #BABED8\"> access_key_id </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> req</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">parse_access_key_id</span><span style=\"color: #89DDFF\">()?;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">let</span><span style=\"color: #BABED8\"> secret_key </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">SecretAccessKey</span><span style=\"color: #89DDFF\">::</span><span style=\"color: #82AAFF\">new</span><span style=\"color: #89DDFF\">(&amp;</span><span style=\"color: #BABED8\">access_key_id</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">let</span><span style=\"color: #BABED8\"> security_token </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> req</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">parse_security_token</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">secret_key</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">as_ref</span><span style=\"color: #89DDFF\">())?;</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">    // 令牌过期检查</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> security_token</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">is_expired</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">reject!</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">req</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> forbidden</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">the security token has expired</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">    // 2. 获取文件</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">let</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Some</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">file_name</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> query</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">get_str</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">file_name</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">else</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">reject!</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">req</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">file_name</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">it should be specified</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">let</span><span style=\"color: #BABED8\"> file_path </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Cluster</span><span style=\"color: #89DDFF\">::</span><span style=\"color: #82AAFF\">shared_dir</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">uploads</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">).</span><span style=\"color: #82AAFF\">join</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">file_name</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">    // 3. 解密并发送文件</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">let</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">mut</span><span style=\"color: #BABED8\"> file </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">NamedFile</span><span style=\"color: #89DDFF\">::</span><span style=\"color: #82AAFF\">try_from_local</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">file_path</span><span style=\"color: #89DDFF\">).</span><span style=\"color: #82AAFF\">extract</span><span style=\"color: #89DDFF\">(&amp;</span><span style=\"color: #BABED8\">req</span><span style=\"color: #89DDFF\">)?;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">let</span><span style=\"color: #BABED8\"> decryption_start_time </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Instant</span><span style=\"color: #89DDFF\">::</span><span style=\"color: #82AAFF\">now</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    file</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">decrypt_with</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">secret_key</span><span style=\"color: #89DDFF\">).</span><span style=\"color: #82AAFF\">extract</span><span style=\"color: #89DDFF\">(&amp;</span><span style=\"color: #BABED8\">req</span><span style=\"color: #89DDFF\">)?;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&lt;!--</span><span style=\"color: #BABED8\">code￼</span><span style=\"color: #F78C6C\">15</span><span style=\"color: #89DDFF\">--&gt;</span></span></code></pre></div></li>\n<li><p>refresh</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">async</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">refresh</span>(req: Request) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">Result</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 解析当前JWT令牌</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">claims</span> = req.<span class=\"title function_ invoke__\">parse_jwt_claims</span>(JwtClaims::<span class=\"title function_ invoke__\">shared_key</span>())?;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 2. 刷新令牌</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">data</span> = User::<span class=\"title function_ invoke__\">refresh_token</span>(&amp;claims).<span class=\"keyword\">await</span>.<span class=\"title function_ invoke__\">extract</span>(&amp;req)?;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 3. 返回新令牌</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">res</span> = Response::<span class=\"title function_ invoke__\">default</span>().<span class=\"title function_ invoke__\">context</span>(&amp;req);</span><br><span class=\"line\">    res.<span class=\"title function_ invoke__\">set_json_data</span>(data);</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Ok</span>(res.<span class=\"title function_ invoke__\">into</span>())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>refresh 应该是设计在后台自动刷新的？example中疑似并没有实现调用的功能，{这也是之前没有尝试过的做法呢}</p>\n</li>\n</ul>\n</li>\n</ul>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">TIP</p>\n<p></p>\n</div>\n<ul>\n<li><p>logout</p>\n<ul>\n<li><div class=\"language-rust\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">rust</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F78C6C\">pub</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">async</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">fn</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">logout</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">req</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Request</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">-&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Result</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">    // 1. 获取用户会话</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">let</span><span style=\"color: #BABED8\"> user_session </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> req</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">get_data</span><span style=\"color: #89DDFF\">::&lt;</span><span style=\"color: #FFCB6B\">UserSession</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\">_</span><span style=\"color: #89DDFF\">&gt;&gt;()</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">ok_or_else</span><span style=\"color: #89DDFF\">(||</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">warn!</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">401 Unauthorized: user session is invalid</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">))</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">extract</span><span style=\"color: #89DDFF\">(&amp;</span><span style=\"color: #BABED8\">req</span><span style=\"color: #89DDFF\">)?;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">let</span><span style=\"color: #BABED8\"> user_id </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> user_session</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">user_id</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">    // 2. 更新用户状态</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">let</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">mut</span><span style=\"color: #BABED8\"> mutation </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">MutationBuilder</span><span style=\"color: #89DDFF\">::&lt;</span><span style=\"color: #FFCB6B\">User</span><span style=\"color: #89DDFF\">&gt;::</span><span style=\"color: #82AAFF\">new</span><span style=\"color: #89DDFF\">()</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">set</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">Status</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">SignedOut</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #676E95; font-style: italic\">    // 设置为登出状态</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">set_now</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">UpdatedAt</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #676E95; font-style: italic\">          // 更新时间</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">inc_one</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">Version</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #676E95; font-style: italic\">            // 版本号+1</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">build</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">    // 3. 执行更新</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">let</span><span style=\"color: #BABED8\"> user</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">User</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">User</span><span style=\"color: #89DDFF\">::</span><span style=\"color: #82AAFF\">update_by_id</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">user_id</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&amp;</span><span style=\"color: #C792EA\">mut</span><span style=\"color: #BABED8\"> mutation</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">.</span><span style=\"color: #89DDFF; font-style: italic\">await</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">extract</span><span style=\"color: #89DDFF\">(&amp;</span><span style=\"color: #BABED8\">req</span><span style=\"color: #89DDFF\">)?;</span></span></code></pre></div></li>\n</ul>\n</li>\n<li><p>重点关注到Jwt的认证，包括令牌生成，令牌解析以及刷新令牌</p>\n</li>\n<li><p>会话管理： 获取 &amp;&amp; 验证</p>\n</li>\n<li><p>关于用户状态的设置，<code>.set(Status, &quot;&quot;)</code>,如Active，SignedOut</p>\n</li>\n<li><p>版本控制的部分不是很懂是在做什么</p>\n</li>\n<li></li>\n</ul>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">TIP</p>\n<p></p>\n</div>\n","feature":false,"text":"熟悉zino框架...","permalink":"/post/zino-start","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"15 mins."},"categories":[{"name":"Zino","slug":"Zino","count":1,"path":"api/categories/Zino.json"},{"name":"后端","slug":"Zino/后端","count":1,"path":"api/categories/Zino/后端.json"},{"name":"Rust","slug":"Zino/后端/Rust","count":1,"path":"api/categories/Zino/后端/Rust.json"}],"tags":[{"name":"rust","slug":"rust","count":5,"path":"api/tags/rust.json"},{"name":"zino","slug":"zino","count":1,"path":"api/tags/zino.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#intro\"><span class=\"toc-text\">intro</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%8Eexample%E5%BC%80%E5%A7%8B%E7%86%9F%E6%82%89zino%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">从example开始熟悉zino框架</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%9A%E8%BF%87actix-app-%E4%BA%86%E8%A7%A3zino%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">通过actix-app 了解zino框架</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">配置文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">日志文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#public\"><span class=\"toc-text\">public</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#src\"><span class=\"toc-text\">src</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#domain-extension-logic-service\"><span class=\"toc-text\">domain extension logic service</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#router\"><span class=\"toc-text\">router</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#middleware\"><span class=\"toc-text\">middleware</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#UserSessionInitializer\"><span class=\"toc-text\">UserSessionInitializer</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#UserSessionMiddleware\"><span class=\"toc-text\">UserSessionMiddleware</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#model\"><span class=\"toc-text\">model</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#zino-prelude\"><span class=\"toc-text\">zino::prelude</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#zino-derive\"><span class=\"toc-text\">zino_derive</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#pub-struct-Tag\"><span class=\"toc-text\">pub struct Tag</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#schedule\"><span class=\"toc-text\">schedule</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#job-rs\"><span class=\"toc-text\">job.rs</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#mod-rs\"><span class=\"toc-text\">mod.rs</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#controller\"><span class=\"toc-text\">controller</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#stats\"><span class=\"toc-text\">stats</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#user-rs\"><span class=\"toc-text\">user.rs</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#file-rs\"><span class=\"toc-text\">file.rs</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"RaphaelNY","slug":"blog-author","avatar":"/img/avatar.png","link":"/","description":"好きなように、自分の願いに従って活動するプログラマー。<br>不定期に面白いものを更新します！","socials":{"github":"https://github.com/RaphaelNY","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fffffff.svg","link":"https://live.bilibili.com/25369205"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"Solana Anchor框架 编程学习","uid":"08ab197663d22426d8804f0a11a49fec","slug":"Anchor-learning","date":"2024-09-03T14:00:00.000Z","updated":"2025-02-18T03:29:44.760Z","comments":true,"path":"api/articles/Anchor-learning.json","keywords":null,"cover":"/img/Solana-coding-learning-cover.jpg","text":"学习如何使用Anchor框架编写Solana智能合约...","permalink":"/post/Anchor-learning","photos":[],"count_time":{"symbolsCount":30,"symbolsTime":"1 mins."},"categories":[{"name":"Rust","slug":"Rust","count":4,"path":"api/categories/Rust.json"},{"name":"区块链","slug":"Rust/区块链","count":2,"path":"api/categories/Rust/区块链.json"}],"tags":[{"name":"rust","slug":"rust","count":5,"path":"api/tags/rust.json"},{"name":"solana","slug":"solana","count":2,"path":"api/tags/solana.json"},{"name":"Anchor","slug":"Anchor","count":1,"path":"api/tags/Anchor.json"}],"author":{"name":"RaphaelNY","slug":"blog-author","avatar":"/img/avatar.png","link":"/","description":"好きなように、自分の願いに従って活動するプログラマー。<br>不定期に面白いものを更新します！","socials":{"github":"https://github.com/RaphaelNY","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fffffff.svg","link":"https://live.bilibili.com/25369205"}}}},"feature":false},"next_post":{"title":"碎碎念的emo情绪","uid":"8c17d3487aed17c3a795749d1b71c388","slug":"emo-time","date":"2024-04-27T16:00:00.000Z","updated":"2024-09-01T14:50:32.103Z","comments":true,"path":"api/articles/emo-time.json","keywords":null,"cover":"/img/emo-time-cover.jpg","text":"大概会在这里面放一些稀奇古怪的情绪垃圾吧。...","permalink":"/post/emo-time","photos":[],"count_time":{"symbolsCount":0,"symbolsTime":"1 mins."},"categories":[{"name":"Emo","slug":"Emo","count":2,"path":"api/categories/Emo.json"}],"tags":[{"name":"emo","slug":"emo","count":2,"path":"api/tags/emo.json"}],"author":{"name":"RaphaelNY","slug":"blog-author","avatar":"/img/avatar.png","link":"/","description":"好きなように、自分の願いに従って活動するプログラマー。<br>不定期に面白いものを更新します！","socials":{"github":"https://github.com/RaphaelNY","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fffffff.svg","link":"https://live.bilibili.com/25369205"}}}},"feature":false}}